#!/bin/bash

RESTIC_BACKUP_DIR="/opt/compose-stacks"
MAILCOW_ROOT="/opt/compose-stacks/mailcow-dockerized"
MAILCOW_BACKUP_LOCATION=$MAILCOW_ROOT/backups

## Find all running containers, except mailcow containers ##
mapfile -t NOTMAILCOW_CONTAINERS < <( comm -2 -3 <(docker ps -q | sort) <(docker ps -q --filter='name=mailcowdockerized*' | sort) )

## Send push message that some services are going down for backup ##
ifttt_message  -s "info" -t "Backup started" -m "Full backup started on $HOSTNAME, some services may be offline while backup completes"

## Stop all running containers, except mailcow containers ##
docker stop ${NOTMAILCOW_CONTAINERS[@]}

## Run restic backup on the compose-stacks directory except mailcow backups, they are already backed up by other script ##
RESTIC_REPOSITORY="rclone:liam-storj-space:main-server-backups" \
RESTIC_PASSWORD="{{ main_server_backups_restic_repo_pass }}" \
restic backup $RESTIC_BACKUP_DIR  --pack-size=60 --exclude $MAILCOW_BACKUP_LOCATION -o rclone.args="serve restic --stdio --b2-hard-delete --config {{ rclone_config_path }}"
RESTIC_UPLOAD_STATUS=$?

## Bring the containers that were brought down back up ##
docker start ${NOTMAILCOW_CONTAINERS[@]}
DOCKER_START_STATUS=$?

## Prune the restic repo to ensure that only the nessecary backups are kept ##
#restic forget --prune 

## Send ifttt_message to alert backup status ##
## Add the two return codes, and they should still be 0 if the two commands were successful ##
if [ $(($RESTIC_UPLOAD_STATUS+$DOCKER_START_STATUS)) -ne 0 ]; then
    ifttt_message  -s "error" -t "Backup failed" -m "Full backup proccess failed on $HOSTNAME"
    exit 1
fi
ifttt_message  -s "backup-completed" -t "Backup completed" -m "Full backup completed successfully on $HOSTNAME"